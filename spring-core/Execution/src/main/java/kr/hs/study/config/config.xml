<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	                    http://www.springframework.org/schema/beans/spring-beans.xsd
	                    http://www.springframework.org/schema/context
	                    http://www.springframework.org/schema/context/spring-context.xsd
	                    http://www.springframework.org/schema/aop
	                    http://www.springframework.org/schema/aop/spring-aop.xsd">
	                    
	<context:annotation-config />
	<bean id="advisor" class="kr.hs.study.advisor.AdvisorClass"/>
	<bean id="t1" class="kr.hs.study.beans.TestBean1"/>
	<bean id="t2" class="kr.hs.study.beans.TestBean2"/>
	<aop:config>
		<aop:aspect ref="advisor">
			<!-- <aop:pointcut expression="execution(void kr.hs.study.beans.TestBean1.method1())" id="point"/> -->
			<!-- return type : void, 패키지 : kr.hs.study.beans, 관심 메소드 : TestBean1 클래스의 method1() -->
			<!-- <aop:pointcut expression="execution(void kr.hs.study.beans.TestBean1.method1(int))" id="point"/> -->
			<!-- return type : void, 패키지 : kr.hs.study.beans, 관심 메소드 : TestBean1 클래스의 int형 매개변수 method1() -->
			<!-- <aop:pointcut expression="execution(void kr.hs.study.beans.TestBean1.method1(String))" id="point"/> -->
			<!-- return type : void, 패키지 : kr.hs.study.beans, 관심 메소드 : TestBean1 클래스의 String형 매개변수 method1() -->
			<!-- <aop:pointcut expression="execution(void kr.hs.study.beans.TestBean1.method1(*))" id="point"/> -->
			<!-- return type : void, 패키지 : kr.hs.study.beans, 관심 메소드 : TestBean1 클래스의 모든 매개변수의 하나인 method1() -->
			<!-- <aop:pointcut expression="execution(void kr.hs.study.beans.TestBean1.method1(int, int))" id="point"/> -->
			<!-- return type : void, 패키지 : kr.hs.study.beans, 관심 메소드 : TestBean1 클래스의 정수형 매개변수 2개 method1() -->
			<!-- <aop:pointcut expression="execution(void kr.hs.study.beans.TestBean1.method1(int, String))" id="point"/> -->
			<!-- return type : void, 패키지 : kr.hs.study.beans, 관심 메소드 : TestBean1 클래스의 정수형 1개, 문자열 1개 method1() -->
			<!-- <aop:pointcut expression="execution(void kr.hs.study.beans.TestBean1.method1(*, *))" id="point"/> -->
			<!-- return type : void, 패키지 : kr.hs.study.beans, 관심 메소드 : TestBean1 클래스의 모든타입의 매개변수 2개 method1() -->
			<!-- <aop:pointcut expression="execution(void kr.hs.study.beans.TestBean1.method1(..))" id="point"/> -->
			<!-- return type : void, 패키지 : kr.hs.study.beans, 관심 메소드 : TestBean1 클래스의 모든 타입의 매개변수 0개 이상 method1() -->
			<!-- <aop:pointcut expression="execution(void kr.hs.study.beans.TestBean1.*(..))" id="point"/> -->
			<!-- return type : void, 패키지 : kr.hs.study.beans, 관심 메소드 : TestBean1 클래스의 모든 메소드 -->
			<!-- <aop:pointcut expression="execution(void kr.hs.study.beans.*.method1(..))" id="point"/> -->
			<!-- return type : void, 패키지 : kr.hs.study.beans, 관심 메소드 : 모든 클래스, method1 메소드 -->
			<!-- <aop:pointcut expression="execution(void kr.hs.study.beans.*.*(..))" id="point"/> -->
			<!-- return type : void, 패키지 : kr.hs.study.beans, 관심 메소드 : 모든 클래스, 모든 메소드 -->
			<!-- <aop:pointcut expression="execution(void kr.hs.study.*.*.*(..))" id="point"/> -->
			<!-- return type : void, 패키지 : kr.hs.study의 모든 패키지, 관심 메소드 : 모든 클래스, 모든 메소드 -->
			<!-- <aop:pointcut expression="execution(void *.*(..))" id="point"/> -->
			<!-- return type : void, 패키지 : 모든 패키지, 관심 메소드 : 모든 클래스, 모든 메소드 -->
			<!-- <aop:pointcut expression="execution(int *.*(..))" id="point"/> -->
			<!-- return type : int, 패키지 : 모든 패키지, 관심 메소드 : 모든 클래스, 모든 메소드 -->		
			<!-- <aop:pointcut expression="execution(* *.*(..))" id="point"/> -->
			<!-- return type : 모든 타입, 패키지 :모든 패키지, 관심 메소드 : 모든 클래스, 모든 메소드 -->
			<aop:before method="beforeMethod" pointcut-ref="point"/>
		</aop:aspect>
	</aop:config>
</beans>